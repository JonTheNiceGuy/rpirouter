# General options
bind-interfaces
no-hosts
log-dhcp
expand-hosts
no-resolv
{% if usb0_interface_cidr6 | length > 0 or usb1_interface_cidr6 | length > 0 %}
enable-ra
{% endif %}

{% if create_bridge | bool %}
# DHCP for BR0
interface=br0
dhcp-range=br0,{{ usb0_interface_dhcp_start }},{{ usb0_interface_dhcp_end }},2h
{% if usb0_interface_cidr6 | length > 0 %}
dhcp-range=br0,::2,::FFFF:FFFF:FFFF:FFFF,constructor:br0,ra-names,2h
{% endif %}
dhcp-option=br0,option:router{% if use_as_default_route  | bool %},{{ usb0_interface_router }}{% endif %}

{% else %}
# DHCP for USB0
interface=usb0
{% if usb0_interface_cidr | length > 0 %}
dhcp-range=usb0,{{ usb0_interface_dhcp_start }},{{ usb0_interface_dhcp_end }},2h
<<<<<<< HEAD
dhcp-option=usb0,option:router{% if use_as_default_route  | bool %},{{ usb0_interface_router }}{% endif %}
{% endif %}
{% if usb0_interface_cidr6 | length > 0 %}
dhcp-range=usb0,::2,::FFFF:FFFF:FFFF:FFFF,constructor:usb0,ra-names,2h
{% endif %}
=======
dhcp-option=usb0,option:router{% if use_as_default_route | default(false) | bool %},{{ usb0_interface_router }}{% endif %}
>>>>>>> Fixing misplaced dhcp-option for DNS

{% if defined_routes is not string and defined_routes is not mapping and defined_routes is iterable %}
{% for route in defined_routes %}
dhcp-option=usb0,option:classless-static-route,{{ route }},{{ usb0_interface_router }}
{% endfor %}
{% elif defined_routes is not string and defined_routes is mapping %}
{% for route in defined_routes | dict2items %}
dhcp-option=usb0,option:classless-static-route,{{ route.key }},{{ route.value.usb0 | default(route.value.gw | default(usb0_interface_router)) }}
{% endfor %}
{% endif %}

{% if use_libComposite | bool %}
# DHCP for USB1
interface=usb1
{% if usb1_interface_cidr | length > 0 %}
dhcp-range=usb1,{{ usb1_interface_dhcp_start }},{{ usb1_interface_dhcp_end }},2h
{% endif %}
{% if usb1_interface_cidr6 | length > 0 %}
dhcp-range=usb1,::2,::FFFF:FFFF:FFFF:FFFF,constructor:usb1,ra-names,2h
{% endif %}
dhcp-option=usb1,option:router{% if use_as_default_route | bool %},{{ usb1_interface_router }}{% endif %}

{% if defined_routes is not string and defined_routes is not mapping and defined_routes is iterable %}
{% for route in defined_routes %}
dhcp-option=usb1,option:classless-static-route,{{ route }},{{ usb1_interface_router }}
{% endfor %}
{% elif defined_routes is not string and defined_routes is mapping %}
{% for route in defined_routes | dict2items %}
dhcp-option=usb1,option:classless-static-route,{{ route.key }},{{ route.value.usb1 | default(route.value.gw | default(usb1_interface_router)) }}
{% endfor %}
{% endif %}
{% endif %}

{% endif %}
# DNS
dhcp-option=option:domain-name,{{ dns_name }}
<<<<<<< HEAD

=======
>>>>>>> Fixing misplaced dhcp-option for DNS
{% if dns_servers is not string and dns_servers is not mapping and dns_servers is iterable %}
{% for item in dns_servers %}
server={{ item }}

{% endfor %}
{% elif dns_servers is not string and dns_servers is mapping %}
{% for item in dns_servers | dict2items %}
server={{ item.key }}{% if item.value.port is defined %}#{{ item.value.port }}{% endif %}

{% if item.value.reverse is defined %}
rev-server={{ item.value.reverse }},{{ item.key }}{% if item.value.port is defined %}#{{ item.value.port }}{% endif %}
{% endif %}

{% endfor %}
{% endif %}
